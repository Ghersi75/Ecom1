// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator kysely {
  provider = "prisma-kysely"

  // Optionally provide a destination directory for the generated file
  // and a filename of your choice
  output = "../src/db"
  fileName = "types.ts"
  // Optionally generate runtime enums to a separate file
    enumFileName = "enums.ts"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Only important fields for signing up are
// Username
// Email
// Password, though optional if other providers are used
model User {
  UserID Int @id @default(autoincrement())
  Username String @unique 
  FirstName String?
  LastName String?
  ProfilePicture String?
  Email String @unique
  PhoneNumber String?
  PasswordHash String?
  Provider String
  RegisterAt DateTime @default(now())
  LastLogin DateTime @default(now())

  @@map("Users")
}

model Section {
  SectionID Int @id @default(autoincrement())
  // Name for organizing/internal use. 
  // For example, one section may be named october_specials_limited_2022 while display name may simply be `October Specials`
  // Customers may not need to know what kind of specials are going on, but rather that there are specials
  // Also, restaurant may archive certain sections using the `is_active` field, so name may be useful for these purposes
  Name String @db.VarChar(100)
  // Display name 
  DisplayName String @db.VarChar(100)
  // Key used to order the sections
  DisplayOrder Int @default(0)
  // If a new item is added, or accidentally added, and nothing is selected for active or available, it's better to not show it at first
  IsActive Boolean @default(false)
  IsAvailable Boolean @default(false)

  SectionItems SectionItems[]

  @@map("Sections")
}

model MenuItems {
  ItemID Int @id @default(autoincrement())
  Name String @db.VarChar(100)
  DisplayText String @db.VarChar(100)
  Description String? @db.VarChar(500)
  ImageLink String? @db.VarChar(2048)
  // If base price is null, then price is dependent on size of item
  // For example, a small pizza's price may be different from a medium pizza, and any 2 medium pizzas may have different price differences and base prices based on sizes
  // Sm Cheese = $10.99, Md Cheese = $13.99
  // Sm Special = $11.99, Md Special = $14.49
  // The prices don't have the same base price, and price doesn't increase consistently based on size, so it's better to have a separate table for pricing based on sizes
  BasePrice Int? @db.MediumInt
  // Used to keep track of starting price for current item, and displayed in the landing page card
  display_price Int? @db.MediumInt
  // This will not be used in the sections at the moment, but may be useful in the future, or for featured items section
  DisplayOrder Int @default(0)
  IsActive Boolean @default(false)
  IsAvailable Boolean @default(false)
  // This may be used to easily put items into the featured section
  // May be used for popular items or anything the restaurant may need
  IsFeatured Boolean @default(false)

  section_items SectionItems[]
  item_modifiers ItemModifiers[]
  item_option_prices ItemOptionPrices[]

  @@map("MenuItems")
}

model SectionItems {
  ComboID Int @id @default(autoincrement())

  DisplayOrder Int @default(0)
  IsActive Boolean @default(false)
  IsAvailable Boolean @default(false)

  Section Section @relation(fields: [SectionID], references: [SectionID]) 
  SectionID Int
  MenuItem MenuItems @relation(fields: [ItemID], references: [ItemID])
  ItemID Int

  @@map("SectionItems")
}

enum ModifierType {
  RADIO
  CHECKBOX
}

// Modifier Section table
// Ex: Topping, Size, Extra Sides, etc.
model Modifiers {
  ModifierID Int @id @default(autoincrement())
  Name String @db.VarChar(100) @default("modifier")
  DisplayText String @db.VarChar(100) @default("Modifier Section")
  Description String? @db.VarChar(255)
  IsRequired Boolean @default(false)
  MaxSelection Int?
  // Radio or Checkbox
  ModifierType ModifierType
  DefaultOptionID Int? 
  DisplayOrder Int @default(0)
  IsActive Boolean @default(false)
  IsAvailable Boolean @default(false)

  ItemModifiers ItemModifiers[]
  ModifierOptions ModifierOptions[]

  @@map("Modifiers")
}

// Table to link modifiers to items
// Ex: Pizza has Size, Toppings, Extras Modifier Sections
model ItemModifiers {
  ComboID Int @id @default(autoincrement())
  ItemID Int
  Item MenuItems @relation(fields: [ItemID], references: [ItemID])
  ModifierID Int
  Modifier Modifiers @relation(fields: [ModifierID], references: [ModifierID])
  DisplayOrder Int @default(0)
  IsActive Boolean @default(false)
  IsAvailable Boolean @default(false)

  @@map("ItemModifiers")
}

// Table for listing all options found in each modifier section
// Ex: Modifier Size will have Small, Medium, Large as ModifierOptions
model ModifierOptions {
  OptionID Int @id @default(autoincrement())
  ModifierID Int
  Modifier Modifiers @relation(fields: [ModifierID], references: [ModifierID])
  Name String @db.VarChar(100)
  DisplayText String @db.VarChar(100)
  DisplayOrder Int @default(0)
  IsActive Boolean @default(false)
  IsAvailable Boolean @default(false)
  BasePrice Int? @db.MediumInt
  // Come back to this later
  SelectionOptionID Int?
  SelectionOption SelectionOptions? @relation(fields: [SelectionOptionID], references: [SelectionOptionID])

  ItemOptionPrices ItemOptionPrices[]
  ParentOptionPrices OptionOptionPrices[] @relation(name: "ParentOptionRelation")
  DependentOptionPrices OptionOptionPrices[] @relation(name: "DependentOptionRelation")

  @@map("ModifierOptions")
}

model SelectionOptions {
  SelectionOptionID Int @id @default(autoincrement())
  OptionName String @db.VarChar(100)

  ModifierOptions ModifierOptions[]

  @@map("SelectionOptions")
}

// Table to model complex modifier option to menu item prices
// Ex: Pizza Topping Pricing being dependant on Pizza Size for price
model ItemOptionPrices {
  ComboID Int @id @default(autoincrement())
  ItemID Int
  Item MenuItems @relation(fields: [ItemID], references: [ItemID])
  OptionID Int
  ModifierOption ModifierOptions @relation(fields: [OptionID], references: [OptionID])
  Price Int @db.MediumInt
  // No display order here since this is only used for pricing an not sorting whatsoever
  IsActive Boolean @default(false)
  IsAvailable Boolean @default(false)

  @@map("ItemOptionPrices")
}

model OptionOptionPrices {
  ComboID Int @id @default(autoincrement())
  // Option whose price depends on the dependents option
  // Ex: Topping id would go here since pizza topping prices are dependent on size
  ParentOptionID Int
  ParentModifierID ModifierOptions @relation(name: "ParentOptionRelation", fields: [ParentOptionID], references: [OptionID])
  // Option which determines the price
  // Ex: Pizza size being selected would go here since it is the option which the price is dependent on
  DependentOptionID Int
  DependentModifierID ModifierOptions @relation(name: "DependentOptionRelation", fields: [DependentOptionID], references: [OptionID])

  Price Int @db.MediumInt
  IsActive Boolean @default(false)
  IsAvailable Boolean @default(false)

  @@map("OptionOptionPrices")
}