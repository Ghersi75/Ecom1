// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator kysely {
  provider = "prisma-kysely"

  // Optionally provide a destination directory for the generated file
  // and a filename of your choice
  output = "../src/db"
  fileName = "types.ts"
  // Optionally generate runtime enums to a separate file
    enumFileName = "enums.ts"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Only important fields for signing up are
// Username
// Email
// Password, though optional if other providers are used
model User {
  user_id Int @id @default(autoincrement())
  username String @unique 
  first_name String?
  last_name String?
  profile_picture String?
  email String @unique
  phone_number String?
  password_hash String?
  provider String
  registered_at DateTime @default(now())
  last_login DateTime @default(now())

  @@map("users")
}

model Section {
  section_id Int @id @default(autoincrement())
  // Name for organizing/internal use. 
  // For example, one section may be named october_specials_limited_2022 while display name may simply be `October Specials`
  // Customers may not need to know what kind of specials are going on, but rather that there are specials
  // Also, restaurant may archive certain sections using the `is_active` field, so name may be useful for these purposes
  name String @db.VarChar(100)
  // Display name 
  display_text String @db.VarChar(100)
  // Key used to order the sections
  display_order Int @default(0)
  // If a new item is added, or accidentally added, and nothing is selected for active or available, it's better to not show it at first
  is_active Boolean @default(false)
  is_available Boolean @default(false)

  section_items SectionItems[]

  @@map("sections")
}

model MenuItems {
  item_id Int @id @default(autoincrement())
  name String @db.VarChar(100)
  display_text String @db.VarChar(100)
  description String? @db.VarChar(500)
  image_link String? @db.VarChar(2048)
  // If base price is null, then price is dependent on size of item
  // For example, a small pizza's price may be different from a medium pizza, and any 2 medium pizzas may have different price differences and base prices based on sizes
  // Sm Cheese = $10.99, Md Cheese = $13.99
  // Sm Special = $11.99, Md Special = $14.49
  // The prices don't have the same base price, and price doesn't increase consistently based on size, so it's better to have a separate table for pricing based on sizes
  base_price Int? @db.MediumInt
  // Used to keep track of starting price for current item, and displayed in the landing page card
  display_price Int? @db.MediumInt
  // This will not be used in the sections at the moment, but may be useful in the future, or for featured items section
  display_order Int @default(0)
  is_active Boolean @default(false)
  is_available Boolean @default(false)
  // This may be used to easily put items into the featured section
  // May be used for popular items or anything the restaurant may need
  is_featured Boolean @default(false)

  section_items SectionItems[]
  item_modifiers ItemModifiers[]
  item_option_prices ItemOptionPrices[]

  @@map("menu_items")
}

model SectionItems {
  combo_id Int @id @default(autoincrement())

  display_order Int @default(0)
  is_active Boolean @default(false)
  is_available Boolean @default(false)

  section Section @relation(fields: [section_id], references: [section_id]) 
  section_id Int
  menu_item MenuItems @relation(fields: [item_id], references: [item_id])
  item_id Int

  @@map("section_items")
}

enum ModifierType {
  RADIO
  CHECKBOX
}

// Modifier Section table
// Ex: Topping, Size, Extra Sides, etc.
model Modifiers {
  modifier_id Int @id @default(autoincrement())
  name String @db.VarChar(100) @default("modifier")
  display_text String @db.VarChar(100) @default("Modifier Section")
  description String? @db.VarChar(255)
  is_required Boolean @default(false)
  max_selection Int?
  // Radio or Checkbox
  modifier_type ModifierType
  default_option_id Int? 
  display_order Int @default(0)
  is_active Boolean @default(false)
  is_available Boolean @default(false)

  item_modifiers ItemModifiers[]
  modifier_options ModifierOptions[]

  @@map("modifiers")
}

// Table to link modifiers to items
// Ex: Pizza has Size, Toppings, Extras Modifier Sections
model ItemModifiers {
  combo_id Int @id @default(autoincrement())
  item_id Int
  item MenuItems @relation(fields: [item_id], references: [item_id])
  modifier_id Int
  modifier Modifiers @relation(fields: [modifier_id], references: [modifier_id])
  display_order Int @default(0)
  is_active Boolean @default(false)
  is_available Boolean @default(false)

  @@map("item_modifiers")
}

// Table for listing all options found in each modifier section
// Ex: Modifier Size will have Small, Medium, Large as ModifierOptions
model ModifierOptions {
  option_id Int @id @default(autoincrement())
  modifier_id Int
  modifier Modifiers @relation(fields: [modifier_id], references: [modifier_id])
  name String @db.VarChar(100)
  display_text String @db.VarChar(100)
  display_order Int @default(0)
  is_active Boolean @default(false)
  is_available Boolean @default(false)
  base_price Int? @db.MediumInt
  // Come back to this later
  selection_option_id Int?
  selection_option SelectionOptions? @relation(fields: [selection_option_id], references: [selection_option_id])

  item_option_prices ItemOptionPrices[]
  parent_option_prices OptionOptionPrices[] @relation(name: "ParentOptionRelation")
  dependent_option_prices OptionOptionPrices[] @relation(name: "DependentOptionRelation")

  @@map("modifier_options")
}

model SelectionOptions {
  selection_option_id Int @id @default(autoincrement())
  option_name String @db.VarChar(100)

  modifier_options ModifierOptions[]

  @@map("selection_options")
}

// Table to model complex modifier option to menu item prices
// Ex: Pizza Topping Pricing being dependant on Pizza Size for price
model ItemOptionPrices {
  combo_id Int @id @default(autoincrement())
  item_id Int
  item MenuItems @relation(fields: [item_id], references: [item_id])
  option_id Int
  modifier_option ModifierOptions @relation(fields: [option_id], references: [option_id])
  price Int @db.MediumInt
  // No display order here since this is only used for pricing an not sorting whatsoever
  is_active Boolean @default(false)
  is_available Boolean @default(false)

  @@map("item_option_prices")
}

model OptionOptionPrices {
  combo_id Int @id @default(autoincrement())
  // Option whose price depends on the dependents option
  // Ex: Topping id would go here since pizza topping prices are dependent on size
  parent_option_id Int
  parent_modifier_id ModifierOptions @relation(name: "ParentOptionRelation", fields: [parent_option_id], references: [option_id])
  // Option which determines the price
  // Ex: Pizza size being selected would go here since it is the option which the price is dependent on
  dependent_option_id Int
  dependent_modifier_id ModifierOptions @relation(name: "DependentOptionRelation", fields: [dependent_option_id], references: [option_id])

  price Int @db.MediumInt
  is_active Boolean @default(false)
  is_available Boolean @default(false)

  @@map("option_option_prices")
}